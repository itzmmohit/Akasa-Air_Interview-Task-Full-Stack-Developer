
// Copyright 2023  Sleepless Softawre Inc. All Rights Reserved

delete require.cache[ module.filename ];	// reload every time.

const mysql = require( "db" ).mysql;


// Return ASCII sha1 for a string
function sha1(s) {
    var h = require( "crypto" ).createHash("sha1");
    h.update(s);
    return h.digest("hex");
};

// Create and return a random, 40 char SHA1 hash
function rand_hash40() {
    return sha1( "" + ( Date.now() + Math.random() ) );
}

const { log, warn, error } = console;


const DEFAULT_SESSION_TTL = ( 60 * 60 * 24 );   // 24 hours
const DEFAULT_RESET_CODE_TTL = ( 60 * 60 * 1 ); // 4 hours

//  -   -   -   -   -   -   -   -   -   -   -   -   -   -   

function create( opts, done, fail ) {

    mysql.connect( opts, db => {

        const SESSION_TTL = opts.session_ttl || DEFAULT_SESSION_TTL;
        const RESET_CODE_TTL = opts.reset_code_ttl || DEFAULT_RESET_CODE_TTL;

        //  -   -   -   -   -   -   -   -   -   -   -   -   -   -   

        // fetch raw user record from db given user_id or email
        function raw_user( uid_or_email, done, fail ) {
            const sql = `
                select
                    *
                from users where
                    ( deleted is null and locked = 0 )
                    and
                    ( user_id = ? or email = ? )
                limit 1
                `;
            const args = [ uid_or_email, uid_or_email ];
            db.get_one( sql, args, done, fail );
        }

        // fetch raw user record from db given rst_code code
        function raw_user_from_reset_code( rst_code, done, fail ) {
            const sql = `
                select
                    *
                from users where
                    ( deleted is null and locked = 0 )
                    and
                    ( rst_code = ? )
                limit 1
                `;
            const args = [ rst_code ];
            db.get_one( sql, args, done, fail );
        }

        // fetch raw session record given sid
        function raw_session( sid, done, fail ) {
            const sql = `
                select
                    *
                from sessions where
                    ( sid = ? )
                    and
                    ( now() < expires )
                limit 1
                `;
            const args = [ sid ];
            db.get_one( sql, args, done, fail );
        }


        // bump up the expires timestamp for session given an sid
        function bump_session_expiry( sid, done, fail ) {
            const sql = `
                update sessions set
                    expires = date_add( now(), interval ? second )
                where
                    ( sid = ? )
                    and
                    ( now() < expires )
                limit 1
                `;
            const args = [ SESSION_TTL, sid ];
            db.update( sql, args, done, fail );
        }

    
        // insert new session record
        function make_session( user_id, done, fail ) {
            const sid = rand_hash40();
            const sql = `
                insert into sessions (
                    user_id, sid, agent, remote_ip, expires
                ) values (
                    ?, ?, "", "", date_add( now(), interval ? second )
                )
                `;
            const args = [ user_id, sid, SESSION_TTL ];
            db.insert( sql, args, new_id => {
                done( sid );
            }, fail );
        }


        // insert new user record
        function make_user( email, user_id, password, done, fail ) {
            const sid = rand_hash40();
            const sql = `
                insert into users (
                    user_id, locked, email, pw_hash, pw_salt
                ) values (
                    ?, 0, ?, ?, ?
                )
                `;
            const pw_salt = rand_hash40();  // random salt
            const pw_hash = sha1( password + pw_salt );
            const args = [ user_id, email, pw_hash, pw_salt ];
            db.insert( sql, args, new_id => {
                done( user_id );
            }, fail );
        }

        //  -   -   -   -   -   -   -   -   -   -   -   -   -   -   

        // Get sanitized session object for an sid or null if sid is invalid
        function get_session( sid, done, fail ) {
            raw_session( sid, rec => {      // get raw session record
                if( ! rec ) {
                    // sid not found, expired, etc.
                    done( {} );
                    return;
                }
                // rec found 
                const { user_id, expires } = rec;   // pull out values
                raw_user( user_id, rec => {         // get associated raw user rec
                    if( ! rec ) {
                        // user vanished while session still valid
                        done( {} );
                        return;
                    }
                    const session = {
                        sid,
                        expires,
                        user: {
                            user_id,
                            email: rec.email,
                        }
                    };
                    done( { session } );
                }, fail );
            }, fail );
        }

        // Get sanitized user object given a user_id or email
        function get_user( uid_or_email, done, fail ) {
            raw_user( uid_or_email, rec => {
                if( ! rec ) {
                    // user_id or email not found, locked, etc.
                    done( {} );
                    return;
                }
                // sanitize user object
                const { user_id, email, created, } = rec;  // extract fields I want
                const user = { user_id, email, created, }; // build back into object
                done( { user } );
            }, fail );
        }

        // Reset the timeout for an active session
        function freshen_session( sid, done, fail ) {
            bump_session_expiry( sid, affected => {
                get_session( sid, done, fail );
            }, fail );
        }

        // Clear/delete a session
        function end_session( sid, done, fail ) {
            const sql = `
                delete from sessions 
                where sid = ?
                limit 1
                `;
            const args = [ sid ];
            db.insert( sql, args, new_id => {
                done( {} );
            }, fail );
        }

        // Authenticate/login a new user account
        // Returns a session object if successful
        function authenticate( uid_or_email, password, done, fail ) {

            raw_user( uid_or_email, user => {

                if( ! user ) {
                    // no such user 
                    done( { error: "User not found: " + uid_or_email } );
                    return;
                }

                const hash = sha1( password + user.pw_salt );

                if( user.pw_hash != hash ) {
                    done( { error: "Wrong password for user: " + password } );
                    return;
                }

                // sanitize user object
                const { user_id, email, created, } = user; // extract fields I want
                //user = { user_id, email, created, };       // build back into object

                make_session( user_id, sid => {
                    get_session( sid, done, fail );
                }, fail );

            }, fail );

        }

        // Register a new user account
        function register( email, user_id, password, done, fail ) {
            if( ! ( "" + user_id ).match( /^[-_A-Za-z0-9]+$/ ) ) {
                done( { error: "Username contains disallowed characters", user_id } );
                return;
            }

            raw_user( user_id, user => {
                if( user ) {
                    done( { error: "Username is already registered: " + user_id } );
                    return;
                }
                raw_user( email, user => {
                    if( user ) {
                        done( { error: "Email already in use: " + email } );
                        return;
                    }
                    if( ( "" + password ).length < 8 ) {
                        done( { error: "Password is too short", } );
                        return;
                    }
                    make_user( email, user_id, password, user_id => {
                        done( { user_id } );
                    }, fail );
                }, fail );
            }, fail );

        }

        // Delete a user account
        function unregister( uid_or_email, password, done, fail ) {
            raw_user( uid_or_email, user => {
                const sql = `
                    update users set
                        deleted = now()
                    where
                        user_id = ?
                    limit 1
                    `;
                const args = [ user.user_id ];
                db.update( sql, args, affected => {
                    done( {} );
                }, fail );
            }, fail );
        }

        // Generates a password reset code for a user and returns it
        // The code is only valid for limited time and reset_password() (below)
        // must be called before it expires.
        function reset_password_code( uid_or_email, done, fail ) {
            raw_user( uid_or_email, user => {
                if( ! user ) {
                    done( { error: "User not found: " + uid_or_email } );
                    return;
                }
                const rst_code = rand_hash40();
                const sql = `
                    update users set
                        rst_code = ?,
                        rst_expire = date_add( now(), interval ? second )
                    where
                        user_id = ?
                    limit 1
                    `;
                const args = [ rst_code, RESET_CODE_TTL, user.user_id ];
                db.update( sql, args, affected => {
                    done( { code: rst_code } );
                }, fail );
            }, fail );
        }

        // Set a new password for a user.
        // The reset_code must still be valid (see above)
        // NOTE: There's not user_id provided here, we have to look it up
        function reset_password( reset_code, new_password, done, fail ) {
            raw_user_from_reset_code( reset_code, user => {
                if( ! user ) {
                    done( { error: "User not found: " + uid_or_email } );
                    return;
                }
                // found user with the reset code and it hasn't expired
                const { user_id, pw_salt, } = user;
                const pw_hash = sha1( new_password + pw_salt );
                const sql = `
                    update users set
                        rst_code = "",
                        pw_hash = ?
                    where
                        user_id = ?
                    limit 1
                    `;
                const args = [ pw_hash, user_id ];
                db.update( sql, args, affected => {
                    done( { user_id } );
                }, fail );
            }, fail )
        }

        function destroy() {
            db.end();
            db = null;
        }

        done( {
            register,
            unregister,
            authenticate,
            get_user,
            get_session,
            freshen_session,
            end_session,
            reset_password_code,
            reset_password,
            destroy,
        } );

    }, fail );
}

module.exports = { create, };

